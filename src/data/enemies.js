export const ENEMY_STAGE_INTERVAL = 5;

export const ENEMY_NAME_POOLS = {
    normal: [
        'ÌõàÎ†®Ïö© ÌÉÄÍπÉ',
        'Ï†ÑÏà† ÎìúÎ°†',
        'Î™®Ïùò Ï†ÑÏ∞®',
        'Ïó∞ÏäµÏö© ÏûêÎèôÌè¨ÎåÄ',
        'Ìï©Îèô ÌõàÎ†® Ïû•ÎπÑ',
        'ÎèÑÏãúÏ†Ñ Î™®Ïùò Ï†Å',
        'Î∞©Ïñ¥Ï†Ñ Î™®Ïùò Ï§ëÍ≥ÑÍ∏∞',
        'Ïã§ÏãúÍ∞Ñ Ï†ÑÏà† Î∂ÑÏÑùÍ∏∞',
        'ÍµêÏ∞® ÏÇ¨Í≤© ÌõàÎ†® Ïû•Ïπò',
        'Î™®Ïùò Ìï©Îèô ÏßÄÏõêÍ∏∞',
        'Ï†ÑÏà† ÎÑ§Ìä∏ÏõåÌÅ¨ ÏàòÏã†Í∏∞',
        'Î∞©Ìï¥Ï†Ñ Î™®Ïùò Ìè¨ÌÉë',
    ],
    boss: [
        'ÌïòÏΩîÎÑ§ Ï†ÑÏà† Í≥®Î†ò',
        'ÌäπÏàò ÏûêÎèôÌè¨ÌÉë',
        'Î™®Ïùò Î©îÏπ¥ÎãàÏπ¥',
        'Ïó∞Ìï© Ïã§Ï†Ñ Í≤ÄÏ¶ùÍ∏∞',
        'Í≥†Ï∂úÎ†• Ï†ÑÏà† ÏöîÏÉà',
        'Ï†àÏ∞® ÌÜµÏ†ú ÌîÑÎ°úÌÜ†ÌÉÄÏûÖ',
        'ÎÑ§Ìä∏ÏõåÌÅ¨ ÌÜµÌï© ÏßÄÌúòÍ∏∞',
        'Ï¢ÖÌï© Ï†ÑÏà† Î™®ÏùòÏ≤¥',
    ],
};

const DEFAULT_STAGE_MODIFIERS = {
    hpMultiplier: 1,
    rewardMultiplier: 1,
    goldBonus: 0,
    equipmentDropBonus: 0,
    gachaDropBonus: 0,
};

export const DEFAULT_STAGE_GIMMICK = {
    id: 'default',
    type: 'normal',
    icon: 'üéØ',
    label: 'ÌëúÏ§Ä ÌõàÎ†®',
    description: 'ÌòÑÏû¨ Íµ¨Í∞ÑÏóêÎäî ÌäπÎ≥ÑÌïú Ìö®Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.',
    effects: [],
    highlight: false,
    alert: 'info',
    modifiers: { ...DEFAULT_STAGE_MODIFIERS },
};

export const ENEMY_STAGE_SEGMENTS = [
    {
        id: 'supply-lane',
        type: 'normal',
        namePool: 'normal',
        offsets: [0, 1],
        icon: 'üì¶',
        label: 'Î≥¥Í∏â Í∞ïÌôî Íµ¨Í∞Ñ',
        description: 'Î≥¥Í∏âÎ°úÍ∞Ä ÏïàÏ†ïÎêòÏñ¥ Ïû•ÎπÑ Î≥¥Í∏âÏù¥ ÌÅ¨Í≤å ÎäòÏñ¥ÎÇ©ÎãàÎã§.',
        effects: ['Ïû•ÎπÑ ÎìúÎ°≠ ÌôïÎ•† +25%'],
        highlight: true,
        alert: 'boost',
        modifiers: {
            equipmentDropBonus: 0.25,
        },
    },
    {
        id: 'finance-boost',
        type: 'normal',
        namePool: 'normal',
        offsets: [2, 3],
        icon: 'üí∞',
        label: 'Ïû¨Ï†ï ÏßëÏ§ë Íµ¨Í∞Ñ',
        description: 'ÌïôÏõê Ïû¨Î¨¥Ïã§Ïù¥ Ï∂îÍ∞Ä ÏßÄÏõêÏùÑ ÏïΩÏÜçÌñàÏäµÎãàÎã§.',
        effects: ['Í≥®Îìú Î≥¥ÏÉÅ +35%', 'Î™®ÏßëÍ∂å ÎìúÎ°≠ ÌôïÎ•† +6%'],
        highlight: true,
        alert: 'boost',
        modifiers: {
            rewardMultiplier: 1.35,
            gachaDropBonus: 0.06,
        },
    },
    {
        id: 'boss-overclock',
        type: 'boss',
        namePool: 'boss',
        offsets: [4],
        icon: '‚ö†Ô∏è',
        label: 'ÏúÑÌòë Îì±Í∏â ÏÉÅÏäπ',
        description: 'Í∞ïÌôîÎêú Î™®Ïùò Î≥¥Ïä§Í∞Ä Ï∂úÌòÑÌñàÏäµÎãàÎã§. ÏãúÍ∞Ñ ÎÇ¥ Ï†úÏïïÏù¥ ÌïÑÏàòÏûÖÎãàÎã§.',
        effects: ['Î≥¥Ïä§ Ï≤¥Î†• +50%', 'Î≥¥ÏÉÅ 2.2Î∞∞', 'Î™®ÏßëÍ∂å ÎìúÎ°≠ ÌôïÎ•† +18%'],
        highlight: true,
        alert: 'warning',
        modifiers: {
            hpMultiplier: 1.5,
            rewardMultiplier: 2.2,
            gachaDropBonus: 0.18,
            equipmentDropBonus: 0.18,
        },
    },
];

const sanitizeModifiers = (rawModifiers = {}) => {
    const modifiers = { ...DEFAULT_STAGE_MODIFIERS };
    Object.entries(rawModifiers).forEach(([key, value]) => {
        const numeric = Number(value);
        if (!Number.isFinite(numeric)) return;
        if (key === 'hpMultiplier' || key === 'rewardMultiplier') {
            modifiers[key] = Math.max(0, numeric);
            return;
        }
        modifiers[key] = numeric;
    });
    return modifiers;
};

const normalizeStage = (stage) => {
    const numeric = Number(stage);
    if (!Number.isFinite(numeric)) return 1;
    return Math.max(1, Math.floor(numeric));
};

const findStageSegment = (stage) => {
    const normalized = normalizeStage(stage);
    const offset = (normalized - 1) % ENEMY_STAGE_INTERVAL;
    return (
        ENEMY_STAGE_SEGMENTS.find((segment) => {
            if (Array.isArray(segment.offsets)) {
                return segment.offsets.includes(offset);
            }
            if (Array.isArray(segment.offsetRange) && segment.offsetRange.length === 2) {
                const [start, end] = segment.offsetRange;
                return offset >= start && offset <= end;
            }
            return false;
        }) ?? null
    );
};

export const getEnemyStageGimmick = (stage) => {
    const segment = findStageSegment(stage);
    if (!segment) {
        return {
            ...DEFAULT_STAGE_GIMMICK,
            modifiers: { ...DEFAULT_STAGE_GIMMICK.modifiers },
        };
    }
    const { offsets, offsetRange, modifiers, ...rest } = segment;
    return {
        ...rest,
        modifiers: sanitizeModifiers(modifiers),
    };
};

export const getEnemyStageModifiers = (stage) => {
    const gimmick = getEnemyStageGimmick(stage);
    return { ...gimmick.modifiers };
};

export const getEnemyNameForStage = (stage, gimmick = null, pools = ENEMY_NAME_POOLS) => {
    const normalized = normalizeStage(stage);
    const poolKey = gimmick?.namePool ?? (gimmick?.type === 'boss' ? 'boss' : null);
    const isBossStage = poolKey === 'boss' || normalized % ENEMY_STAGE_INTERVAL === 0;
    const pool = isBossStage ? pools.boss ?? [] : pools.normal ?? [];
    if (!Array.isArray(pool) || pool.length === 0) {
        return isBossStage ? 'ÎØ∏ÏßÄÏùò Ï†Å (Î≥¥Ïä§)' : 'ÎØ∏ÏßÄÏùò Ï†Å';
    }
    if (isBossStage) {
        const bossIndex = Math.max(0, Math.floor((normalized - 1) / ENEMY_STAGE_INTERVAL));
        const index = bossIndex % pool.length;
        return `${pool[index]} (Î≥¥Ïä§)`;
    }
    const index = (normalized - 1) % pool.length;
    return pool[index];
};
